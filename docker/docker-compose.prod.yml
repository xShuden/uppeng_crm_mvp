version: '3.8'

# Docker Swarm Production Configuration
# Deploy with: docker stack deploy -c docker-compose.prod.yml crm-stack

services:
  # =============================================================================
  # APPLICATION STACK (Production)
  # =============================================================================

  # Backend API (Production)
  backend:
    image: crm-v2-backend:latest
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    deploy:
      replicas: 3
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-1000}
      - SENTRY_DSN=${SENTRY_DSN}
    networks:
      - crm-network
    secrets:
      - jwt_secret
      - supabase_service_key
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.${DOMAIN_NAME}`)"
      - "traefik.http.services.backend.loadbalancer.server.port=3001"

  # Frontend (Production)
  frontend:
    image: crm-v2-frontend:latest
    build:
      context: ../frontend
      dockerfile: Dockerfile.prod
    deploy:
      replicas: 2
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    environment:
      - REACT_APP_API_URL=https://api.${DOMAIN_NAME}
      - REACT_APP_SUPABASE_URL=${SUPABASE_URL}
      - REACT_APP_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - REACT_APP_ENV=production
      - REACT_APP_SENTRY_DSN=${FRONTEND_SENTRY_DSN}
    networks:
      - crm-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN_NAME}`) || Host(`www.${DOMAIN_NAME}`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================

  # Redis Cluster for caching and rate limiting
  redis:
    image: redis:7-alpine
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    volumes:
      - redis-data:/data
    networks:
      - crm-network
    command: >
      redis-server
      --appendonly yes
      --maxmemory 400mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Traefik Load Balancer & SSL
  traefik:
    image: traefik:v3.0
    deploy:
      placement:
        constraints: [node.role == manager]
      replicas: 1
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-data:/data
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
    networks:
      - crm-network
      - traefik-public
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=false
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=${ACME_EMAIL}
      - DOMAIN_NAME=${DOMAIN_NAME}
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.swarmMode=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/data/acme.json
      - --global.checkNewVersion=false
      - --global.sendAnonymousUsage=false
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # =============================================================================
  # MONITORING & LOGGING
  # =============================================================================

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    deploy:
      placement:
        constraints: [node.role == manager]
      replicas: 1
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - crm-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN_NAME}`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    deploy:
      placement:
        constraints: [node.role == manager]
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${DOMAIN_NAME}
      - GF_SERVER_ROOT_URL=https://grafana.${DOMAIN_NAME}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=${GRAFANA_DB_HOST}
      - GF_DATABASE_NAME=${GRAFANA_DB_NAME}
      - GF_DATABASE_USER=${GRAFANA_DB_USER}
      - GF_DATABASE_PASSWORD=${GRAFANA_DB_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - crm-network
    secrets:
      - grafana_admin_password
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME}`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Loki Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    deploy:
      placement:
        constraints: [node.role == manager]
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    volumes:
      - loki-data:/loki
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
    networks:
      - crm-network
    command: -config.file=/etc/loki/local-config.yaml

  # Promtail Log Collector
  promtail:
    image: grafana/promtail:2.9.0
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
    networks:
      - crm-network
    command: -config.file=/etc/promtail/config.yml

  # =============================================================================
  # UTILITY SERVICES
  # =============================================================================

  # Watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower:latest
    deploy:
      placement:
        constraints: [node.role == manager]
      replicas: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_ROLLING_RESTART=true
      - WATCHTOWER_NOTIFICATIONS=slack
      - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=${SLACK_WEBHOOK_URL}
    command: --interval 3600 --cleanup

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  redis-data:
    driver: local
  traefik-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  crm-network:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 10.0.1.0/24
  traefik-public:
    external: true

# =============================================================================
# SECRETS (Create these before deployment)
# =============================================================================

secrets:
  jwt_secret:
    external: true
    name: crm_jwt_secret
  supabase_service_key:
    external: true
    name: crm_supabase_service_key
  grafana_admin_password:
    external: true
    name: crm_grafana_admin_password

# =============================================================================
# CONFIGS
# =============================================================================

configs:
  prometheus_config:
    file: ./monitoring/prometheus.yml
  traefik_config:
    file: ./traefik/traefik.yml
  traefik_dynamic_config:
    file: ./traefik/dynamic.yml